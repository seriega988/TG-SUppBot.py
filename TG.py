import telebot
import sys,os
import smtplib
import time
from charset_normalizer import md__mypyc
import mimetypes
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import email
import email.mime.application
from telebot import types
global i
######################BOT ID#####################################
bot = telebot.TeleBot('')
@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫."
                                           "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É/–≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text=="üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
        markIN = types.ReplyKeyboardMarkup(resize_keyboard=True)
        INNbtn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        markIN.add(INNbtn)
        bot.send_message(message.from_user.id, "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏(—Ç–µ–ª–µ—Ñ–æ–Ω/–ø–æ—á—Ç–∞)", reply_markup=markIN)
        bot.register_next_step_handler(message, checkINN)
def butINN(message):
    if message.text=="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        mark = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Quesbtn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        mark.add(Quesbtn)
        bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É."
                                               "–¢–∞–∫–∂–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª–∏", reply_markup=mark)
        bot.register_next_step_handler(message, checkQ)
    elif message.text=="/start":
        start(message)
    else:
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ø–∞–º—è—Ç–∏, –Ω–∞–º–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        bot.register_next_step_handler(message, butINN)
def checkQ(message):
    global Question
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å":
        bot.send_message(message.from_user.id, "Fail,go again")
        bot.register_next_step_handler(message, checkQ)
    elif message.text=="/start":
        start(message)
    else:
        bot.send_message(message.from_user.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        Question = message.text
        print(Question)
        i=IDe
        bot.register_next_step_handler(message, priznak)
def priznak(message):
    PrBtn = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    mark = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mark.add(PrBtn)
    bot.send_message(message.from_user.id, "–ù–∞–ø–æ—Å–ª–µ–¥–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Ç—Å–∞ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫(—Ñ–∏–∑–ª–∏—Ü–æ/–ò–ü)"
                                         , reply_markup=mark)
    bot.register_next_step_handler(message, Prcheck)
def Prcheck(message):
    global Priznak
    if message.text=="–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã")
        bot.register_next_step_handler(message,Prcheck)
    elif message.text=="/start":
        start(message)
    else:
        Priznak = message.text
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        bot.register_next_step_handler(message, End)
def End(message):
    if message.text=="–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        EndBtn = types.KeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        mark = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mark.add(EndBtn)
        with open(f"–ó–∞—è–≤–∫–∞-{Priznak}.txt","w") as file:
            file.write(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏-{IDe},–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞-{Question},–ò–ù–ù/–ø—Ä–∏–∑–Ω–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏-{Priznak}')
        send(IDe,Question,Priznak)
        bot.send_message(message.from_user.id, "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "
                                               "'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å'",reply_markup=mark)
        bot.register_next_step_handler(message, EndMs)
    elif message.text=="/start":
        start(message)
    else:
        bot.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
        bot.register_next_step_handler(message, End)
def EndMs(message):
    if message.text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å" or message.text == "/start":
        start(message)
    else:
        bot.send_message(message.from_user.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "
                                               "'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å'. –ò–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
        bot.register_next_step_handler(message, EndMs)
def checkINN(message):
    global IDe
    print(message.text)
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã")
        bot.register_next_step_handler(message, checkINN)
    elif message.text=="/start":
        start(message)
    else:
        IDe = message.text
        bot.send_message(message.from_user.id, "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        bot.register_next_step_handler(message, butINN)
def send(IDe,Question,Priznak):
    ###########################################MAIL#####################################
    EMAIL_ADDRESS = ''
    EMAIL_PASSWORD = ''

    msg = email.mime.multipart.MIMEMultipart()
    msg['Subject'] = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –¢–ì'
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = ""

    body = email.mime.text.MIMEText("""–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏!!–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –±–æ—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º""")
    msg.attach(body)

    filename = f'–ó–∞—è–≤–∫–∞-{Priznak}.txt'
    fp = open(filename, 'rb')
    att = email.mime.application.MIMEApplication(fp.read(), _subtype="txt")
    fp.close()
    att.add_header('Content-Disposition', 'attachment', filename=filename)
    msg.attach(att)

    smtpObj = smtplib.SMTP('', 587)
    smtpObj.starttls()
    smtpObj.login('', '')
    smtpObj.sendmail('','',msg.as_string())
    smtpObj.quit()


@bot.callback_query_handler(func=lambda call: True)
def inline_handler(call):
    if call.data == "resetData":
        bot.delete_message(call.message.chat.id, call.message.message_id)



if __name__ == '__main__':
    ###########################################MAIL#####################################
    msg = email.mime.multipart.MIMEMultipart()
    msg['Subject'] = ''
    msg['From'] = ''
    msg['To'] = ''
    body = email.mime.text.MIMEText(
        """–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω""")
    msg.attach(body)
    smtpObj = smtplib.SMTP('', 587)
    smtpObj.starttls()
    smtpObj.login('', '')
    smtpObj.sendmail('', '', msg.as_string())
    smtpObj.quit()
    while True:
        try:
            bot.polling(none_stop=True)
            ###########################################MAIL#####################################
            msg = email.mime.multipart.MIMEMultipart()
            msg['Subject'] = ''
            msg['From'] = ''
            msg['To'] = ''
            body = email.mime.text.MIMEText(
                """–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω""")
            msg.attach(body)
            smtpObj = smtplib.SMTP('', 587)
            smtpObj.starttls()
            smtpObj.login('', '')
            smtpObj.sendmail('', '', msg.as_string())
            smtpObj.quit()
        except Exception as e:
            ###########################################MAIL#####################################
            msg = email.mime.multipart.MIMEMultipart()
            msg['Subject'] = ''
            msg['From'] = ''
            msg['To'] = ''
            body = email.mime.text.MIMEText(
                """–ë–æ—Ç —É–ø–∞–ª""")
            msg.attach(body)
            smtpObj = smtplib.SMTP('', 587)
            smtpObj.starttls()
            smtpObj.login('', '')
            smtpObj.sendmail('', '', msg.as_string())
            smtpObj.quit()
            time.sleep(3)
            print(e)


